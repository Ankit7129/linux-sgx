enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.

     */

    trusted {
      
       public sgx_status_t ecall_process_file([in, size=len] uint8_t* chunk, size_t len);

        public void ecall_add_vectors([in, size=len] uint8_t* vec1,
                              [in, size=len] uint8_t* vec2,
                              size_t len);
        public void ecall_add_vectors_chunk([in, size=len] uint8_t* vec1, [in, size=len] uint8_t* vec2, size_t len);
        public void ecall_addition_summary();
        

        public sgx_status_t ecall_decrypt_and_add(
            [in, size=len] uint8_t* enc_vec1,
            [in, size=len] uint8_t* enc_vec2,
            size_t len,

            [in, size=key_len] uint8_t* key,
            size_t key_len,

            [in, size=nonce1_len] uint8_t* nonce1,
            size_t nonce1_len,

            [in, size=nonce2_len] uint8_t* nonce2,
            size_t nonce2_len
        );

        public sgx_status_t ecall_decrypt_vector_chunk(
            [in, size=enc_len] uint8_t* enc_data,
            size_t enc_len,
            [in, size=key_len] uint8_t* key,
            size_t key_len,
            [in, size=nonce_len] uint8_t* nonce,
            size_t nonce_len
        );

        public int ecall_search_value([in, size=chunk_size] uint8_t* enc_chunk, size_t chunk_size,
                                      [in, size=key_size] uint8_t* key, size_t key_size,
                                      [in, size=nonce_size] uint8_t* nonce, size_t nonce_size,
                                      int search_value);



    };


    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
