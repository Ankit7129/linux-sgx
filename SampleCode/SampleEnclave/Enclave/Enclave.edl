enclave {
    include "user_types.h"
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;
    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

    trusted {
      //for getting info of avilable memory in shx
        public void ecall_test_heap_allocation();
        public void ecall_test_max_chunk_buffer();

            //to test how much max chunk size i can load at once with example 
        public void ecall_start_vector_load_size_test();

        //to test max chunk size in one contageous memory and max not of fragments 
        public void ecall_SGX_Memory_Analysis();

        // to load vector 
        public void ecall_start_vector_load();
        


        //Load key just after it generation during vector generation
        public sgx_status_t ecall_preload_key_into_enclave([in, size=len] uint8_t* key, size_t len);
        
        
    };

    untrusted {
        void ocall_print_string([in, string] const char* str);
        
        void ocall_get_file_info([out] size_t* file_size);
        void ocall_read_chunk([out, size=buf_size] uint8_t* buffer, size_t buf_size, size_t offset);
        void ocall_get_time_micro([out] long* time_in_us);
        void ocall_write_plain_chunk([in, size=len] uint8_t* plaintext, size_t len, size_t offset);
        void ocall_get_epc_free_kb([out] size_t* epc_kb);
        void ocall_log_json([in, string] const char* json);
    };
};