enclave {
    include "user_types.h"
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;
    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

    trusted {
        public int ecall_decrypt_aesgcm_chunk(
            [in, size=ciphertext_size] uint8_t* ciphertext, size_t ciphertext_size,
            [in, size=key_size] uint8_t* key, size_t key_size,
            [in, size=nonce_size] uint8_t* nonce, size_t nonce_size,
            [in, size=tag_size] uint8_t* tag, size_t tag_size);

        public void ecall_load_vector_chunk(
            [in, size=chunk_size] const uint8_t* chunk_data, 
            size_t chunk_size);


        public int ecall_decrypt_aesgcm_search_chunk(
            [in, size=ciphertext_size] uint8_t* ciphertext, size_t ciphertext_size,
            [in, size=key_size] uint8_t* key, size_t key_size,
            [in, size=nonce_size] uint8_t* nonce, size_t nonce_size,
            [in, size=tag_size] uint8_t* tag, size_t tag_size);

        
        public void ecall_test_heap_allocation();
        public void ecall_test_max_chunk_buffer();
        
    };

    untrusted {
        void ocall_print_string([in, string] const char* str);
    };
};